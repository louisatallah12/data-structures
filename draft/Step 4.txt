#--step 4--
# We take the crewmate map for exploring all vertices
# We willuse a variante of the Hamiltonian path 
# It is the same algorithm but we have removed the link between the final node and the starting node

class Graph_Hamilton():  
    
    def __init__(self, vertices):  
        self.graph = []  
        self.V = vertices  
  
    # method that verifies the adjacency and whether v is not already in the path
    def check(self, v, position, path):    
        # the adjacency
        if self.graph[ path[position-1] ][v] == 0:  
            return False
  
        # if v not already in path  
        for vertex in path:  
            if vertex == v:  
                return False
        return True
  
    def Hamilton_aux(self, path, position):  
        # if it is the final vertice
        if position == self.V:  
            return True

        # Let's have a look at the next room to visit
        # List of all rooms
        # We exclude the room 4 because it is the starting one  
        liste = [0,1,2,3,5,6,7,8,9,10,11,12,13]

        # Foreach vertice we assign its position
        for v in liste:  
            if self.check(v, position, path) == True:  
                path[position] = v  
                
                if self.Hamilton_aux(path, position+1) == True:  
                    return True
        
        return False
  
    def Hamilton(self):  
        # path is a list of V elements initialized at -1
        path = [-1] * self.V  
        # starting vertice is 4 (Medbay)
        path[0] = 4

        if self.Hamilton_aux(path,1) == False:  
            print ("Sorry, there is no such path") 
            return False
        else : 
            self.display(path)  
            return True
  
    def display(self, path):  
        print ("The route passing through each room is : ") 
        for vertex in path:  
            print ("->",rooms[vertex], end = " ") 

g1 = Graph_Hamilton(14)
# We retake the crewmate map 
g1.graph = copy.deepcopy(g_dijkstra_crewmate.graph)
# let's preprossessing the map by replacing the INF and non-zero values :
for i in range(14) : 
    for j in range(14) : 
        if g1.graph[i][j] == INF : 
            g1.graph[i][j] = 0

for i in range(14) : 
    for j in range(14) : 
        if g1.graph[i][j] != 0 : 
            g1.graph[i][j] = 1

if __name__=='__main__':
    g1.Hamilton()
