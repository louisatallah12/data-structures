#--STEP 3--
# We will proceed with 2 maps
# one as a crewmate and the other one as an impostor with the vents
# We have chosen the Floyd Warshall algorithm to find the shortest path between the rooms 

INF = 1000000000  # We compute a very big number to fill in the matrix

class Graph_FloydWarshall(): 

    def __init__(self, vertices): 
        self.V = vertices 
        self.graph = [[INF for column in range(vertices)]     # initializing the matrix with full of INF (we will use INF if there is no edge)
                    for row in range(vertices)] 
        # fill the digonale with 0
        for i in range(14) :
            self.graph[i][i] = 0        
            
    def floyd_warshall(self):
	    # calculating all pair shortest path
	    for k in range(0, self.V):
		    for i in range(0, self.V):
			    for j in range(0, self.V):
				    # let's take the minimum distance between the direct path and the intermediate
				    self.graph[i][j] = min(self.graph[i][j], self.graph[i][k] + self.graph[k][j])
	    # display
        print("start/end", end='')
	    for i in range(self.V):
		    print("    {:s}".format(rooms[i]), end=' ')
	    print()
	    for i in range(self.V):
		    print("%-17s"%rooms[i], end='')
		    for j in range(self.V):
			    print("%-12s"% f"{self.graph[i][j]:.1f}", end='')
		    print()


g_dijkstra_crewmate = Graph_FloydWarshall(14)
# Below the index of the rooms :
rooms = {0 : "Reactor" ,
        1 : "Upper E", 
        2 : "Lower E", 
        3 : "Security",
        4 : "Medbay",
        5 : "Electrical",
        6 : "Cafeteria",
        7 : "Storage",
        8 : "Unkown1",
        9 : "Unknown2",
        10 : "O2",
        11 : "Weapon",
        12 : "Navigation",
        13 : "Shield"}
# edge of the Reactor room 
g_dijkstra_crewmate.graph[0][1] = 2.5
g_dijkstra_crewmate.graph[0][3] = 2.5
g_dijkstra_crewmate.graph[0][2] = 2.5
# edge of the Upper E room 
g_dijkstra_crewmate.graph[1][0] = 2.5 
g_dijkstra_crewmate.graph[1][2] = 4 
g_dijkstra_crewmate.graph[1][3] = 2.5 
g_dijkstra_crewmate.graph[1][4] = 3 
g_dijkstra_crewmate.graph[1][6] = 4.5 
# edge of the Lower E room 
g_dijkstra_crewmate.graph[2][0] = 2.5
g_dijkstra_crewmate.graph[2][1] = 4
g_dijkstra_crewmate.graph[2][3] = 2.5
g_dijkstra_crewmate.graph[2][5] = 3.5
g_dijkstra_crewmate.graph[2][7] = 6
# edge of the Security room
g_dijkstra_crewmate.graph[3][0] = 2.5
g_dijkstra_crewmate.graph[3][1] = 2.5
g_dijkstra_crewmate.graph[3][2] = 2.5
# edge of the Medbay room
g_dijkstra_crewmate.graph[4][1] = 3 
g_dijkstra_crewmate.graph[4][6] = 1.5
# edge of the Electrical room
g_dijkstra_crewmate.graph[5][2] = 3.5
g_dijkstra_crewmate.graph[5][7] = 2.5
# edge of the Cafeteria room 
g_dijkstra_crewmate.graph[6][1] = 4.5
g_dijkstra_crewmate.graph[6][4] = 1.5
g_dijkstra_crewmate.graph[6][7] = 2
g_dijkstra_crewmate.graph[6][8] = 2
g_dijkstra_crewmate.graph[6][11] = 1
# edge of the Storage room
g_dijkstra_crewmate.graph[7][2] = 6 
g_dijkstra_crewmate.graph[7][5] = 2.5 
g_dijkstra_crewmate.graph[7][6] = 2
g_dijkstra_crewmate.graph[7][8] = 1.5 
g_dijkstra_crewmate.graph[7][9] = 2.5
# edge of the Unknown1 room 
g_dijkstra_crewmate.graph[8][6] = 2
g_dijkstra_crewmate.graph[8][7] = 1.5
# edge of the Unkown2 room
g_dijkstra_crewmate.graph[9][7] = 2.5
g_dijkstra_crewmate.graph[9][13] = 1
# edge of the O2 room
g_dijkstra_crewmate.graph[10][11] = 2
g_dijkstra_crewmate.graph[10][12] = 4
g_dijkstra_crewmate.graph[10][13] = 4
# edge of the Weapon room 
g_dijkstra_crewmate.graph[11][6] = 1 
g_dijkstra_crewmate.graph[11][10] = 2 
g_dijkstra_crewmate.graph[11][12] = 4.5
# edge of the Navigation room
g_dijkstra_crewmate.graph[12][10] = 4
g_dijkstra_crewmate.graph[12][11] = 4.5
g_dijkstra_crewmate.graph[12][13] = 4.5
# edge of the Shield room
g_dijkstra_crewmate.graph[13][9] = 1
g_dijkstra_crewmate.graph[13][10] = 4
g_dijkstra_crewmate.graph[13][12] = 4.5
import copy
### Rooms with the vents 
g_dijkstra_impostor = Graph_FloydWarshall(14)
g_dijkstra_impostor.graph = copy.deepcopy(g_dijkstra_crewmate.graph)

"modifying the edge weights because of the vents"
# {Reactor , Upper E}
g_dijkstra_impostor.graph[0][1] = 0
g_dijkstra_impostor.graph[1][0] = 0
# {Reactor , Lower }
g_dijkstra_impostor.graph[0][2] = 0
g_dijkstra_impostor.graph[2][0] = 0
# {Medbay , Security}
g_dijkstra_impostor.graph[4][3] = 0
g_dijkstra_impostor.graph[3][4] = 0
# {Medbay , Electrical}
g_dijkstra_impostor.graph[4][5] = 0
g_dijkstra_impostor.graph[5][4] = 0
# {Security , Medbay}
g_dijkstra_impostor.graph[3][5] = 0
g_dijkstra_impostor.graph[5][3] = 0
# {Cafeteria , Unknown1}
g_dijkstra_impostor.graph[8][6] = 0
g_dijkstra_impostor.graph[6][8] = 0
# {Cafeteria , O2}
g_dijkstra_impostor.graph[6][10] = 3
g_dijkstra_impostor.graph[10][6] = 3
# {Cafeteria , Shield}
g_dijkstra_impostor.graph[6][13] = 2
g_dijkstra_impostor.graph[13][6] = 2
# {Cafeteria , Navigation}
g_dijkstra_impostor.graph[6][12] = 3.5
g_dijkstra_impostor.graph[12][6] = 3.5
# {Cafeteria , Weapon}
g_dijkstra_impostor.graph[6][11] = 3.5
g_dijkstra_impostor.graph[11][6] = 3.5

# {Unknonw1 , O2}
g_dijkstra_impostor.graph[8][10] = 3
g_dijkstra_impostor.graph[10][8] = 3
# {Unknown1 , Shield}
g_dijkstra_impostor.graph[8][13] = 2
g_dijkstra_impostor.graph[13][8] = 2
# {Unknown1 , Navigation}
g_dijkstra_impostor.graph[8][12] = 3.5
g_dijkstra_impostor.graph[12][8] = 3.5
# {Unknown1 , Weapon}
g_dijkstra_impostor.graph[8][11] = 3.5
g_dijkstra_impostor.graph[11][8] = 3.5

# {Weapon , Navigation}
g_dijkstra_impostor.graph[12][11] = 0
g_dijkstra_impostor.graph[11][12] = 0
#{Navigation , Shield}
g_dijkstra_impostor.graph[12][13] = 0
g_dijkstra_impostor.graph[13][12] = 0






if __name__=='__main__':
    for item in rooms.items() : 
        print(item)
    
    print()
    g_dijkstra_impostor.floyd_warshall()
    g_dijkstra_crewmate.floyd_warshall()