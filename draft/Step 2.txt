#--Step 2-- 

#--1--
player_0 = Player(0, 0)
player_1 = Player(0, 1)
player_2 = Player(0, 2)
player_3 = Player(0, 3)
player_4 = Player(0, 4)
player_5 = Player(0, 5)
player_6 = Player(0, 6)
player_7 = Player(0, 7)
player_8 = Player(0, 8)
player_9 = Player(0, 9)
graph = {player_0 : [player_1,player_4,player_5],
        player_1 : [player_0, player_2, player_6],
        player_2 : [player_1, player_3, player_7],
        player_3 : [player_2, player_4, player_8],
        player_4 : [player_0, player_3, player_9],
        player_5 : [player_0, player_7, player_8],
        player_6 : [player_1, player_8, player_9],
        player_7 : [player_2, player_5, player_9],
        player_8 : [player_3, player_5, player_6],
        player_9 : [player_4, player_6, player_7]}
graph2 = {0 : [1,4,5],
        1 : [0, 2, 6],
        2 : [1, 3, 7],
        3 : [2, 4, 8],
        4 : [0, 3, 9],
        5 : [0, 7, 8],
        6 : [1, 8, 9],
        7 : [2, 5, 9],
        8 : [3, 5, 6],
        9 : [4, 6, 7]}

#--4--
# method to find the impostors after a death
def Find_Impostors(dead_player) :
    suspects = graph2[dead_player.name]   # suspects are the players who have met the dead player

    dico2 = graph2
    dico_color = g1.coloration()
    for suspect in suspects :
        print()
        print("if Player "+str(suspect)+ " is an impostor, the other one is one of them : ")
        for k in dico_color.keys() :
            if dico_color[k] != dico_color[suspect] and k not in dico2[suspect] and not dead_player.name :  # if the node is not the same colour nor a neighbor  and not the dead player 
                print("  Player "+str(k), end = ", ")
        print()
    

class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def add_edge(self, u, v):
        self.graph.append([u.name, v.name])
    def __str__(self) : 
        return str(self.graph)
    def __repr__(self) : 
        return str(self.graph)

    def coloration(self) : 
        colour = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
        
        colour[0] = 0 #assignation of the first colour
        temp =[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
        
        for i in range(0,30,3) :    
            
            if colour[self.graph[i][0]] != -1 : 
                temp[self.graph[i][0]] = colour[self.graph[i][0]]
            
            if colour[self.graph[i][1]] == -1 :
                temp.extend([colour[self.graph[3*self.graph[i][1]][1]], colour[self.graph[3*self.graph[i][1]+1][1]], colour[self.graph[3*self.graph[i][1]+2][1]]])
                for k in range(4) : 
                    if k not in temp : 
                        colour[self.graph[i][1]] = k
                        break
                temp =[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
                temp[self.graph[i][0]] = colour[self.graph[i][0]]

            if colour[self.graph[i+1][1]] == -1 :
                temp.extend([colour[self.graph[3*self.graph[i+1][1]][1]], colour[self.graph[3*self.graph[i+1][1]+1][1]], colour[self.graph[3*self.graph[i+1][1]+2][1]]])

                for k in range(4) : 
                    if k not in temp : 
                        colour[self.graph[i+1][1]] = k
                        break
                temp =[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
                temp[self.graph[i][0]] = colour[self.graph[i][0]]

            if colour[self.graph[i+2][1]] == -1 :
                temp.extend([colour[self.graph[3*self.graph[i+2][1]][1]], colour[self.graph[3*self.graph[i+2][1]+1][1]], colour[self.graph[3*self.graph[i+2][1]+2][1]]])

                for k in range(4) : 
                    if k not in temp : 
                        colour[self.graph[i+2][1]] = k
                        break
                temp =[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]

            temp[self.graph[i][0]] = -1

        for i in range(10) : 
            print("Player "+str(i)+" ----> "+str(colour[i]))
        dico = {}
        for i in range(10) : 
            dico[i] = colour[i]
        return dico

g1 = Graph(10)
for k in graph : 
    for i in range(3) :
        g1.add_edge(k, graph[k][i])

if __name__=='__main__':
    print(g1)
    dico = g1.coloration()
    print(dico)
    Find_Impostors(player_0)